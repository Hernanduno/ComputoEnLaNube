#include <stdio.h>
#include <omp.h>
#include <time.h>

#define N 100000
#define chunk 1000
#define mostrar 20

void imprimeArreglo(float *d);
void imprimeArreglo(float *d)
{
    for (int x = 0; x < mostrar; x++)
    {
        printf("%f ", d[x]);
    }
    printf("\n");
}

int main()
{
    printf("Sumando Arreglos en Paralelo!\n");
    float a[N], b[N], c[N];
    int i;

    for (i = 0; i < N; i++)
    {
        a[i] = i * 10;
        b[i] = (i + 3) * 3.7;
    }

    int pedazos = chunk;
    clock_t T1 = clock();

    #pragma omp parallel for \
    shared(a, b, c, pedazos) private(i) \
    schedule(static, pedazos)

    for (i = 0; i < N; i++)
    {
        c[i] = a[i] + b[i];
    }

    clock_t T2 = clock();
    double time_taken = ((double)(T2 - T1)) / CLOCKS_PER_SEC;
    printf("La suma tomÃ´: %f segundos\n", time_taken);
    printf("Primeros %d valores del arreglo a: \n", mostrar);
    imprimeArreglo(a);
    printf("Primeros %d valores del arreglo b: \n", mostrar);
    imprimeArreglo(b);
    printf("Primeros %d valores del arreglo c: \n", mostrar);
    imprimeArreglo(c);
    return 0;
}

